import os
import logging
import random
from datetime import datetime
from telegram import (
    Update, 
    ReplyKeyboardMarkup, 
    ReplyKeyboardRemove,
    InlineKeyboardMarkup, 
    InlineKeyboardButton
)
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    Filters,
    CallbackContext
)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN = os.getenv('BOT_TOKEN')

if not BOT_TOKEN:
    print("‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)

# –í–∫–ª—é—á–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
SETTING_NAME, SETTING_DESCRIPTION, SETTING_BUDGET, SETTING_DATE = range(4)
WISHES, = range(4, 5)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
rooms = {}
user_rooms = {}
pending_registrations = {}
user_wishes = {}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def generate_room_code():
    import string
    characters = string.ascii_uppercase + string.digits
    return ''.join(random.choice(characters) for _ in range(6))

def shuffle_participants(participants):
    if len(participants) < 2:
        return []
    
    shuffled = participants[:]
    for attempt in range(100):
        random.shuffle(shuffled)
        valid = True
        for i in range(len(participants)):
            if participants[i] == shuffled[i]:
                valid = False
                break
        if valid:
            return list(zip(participants, shuffled))
    
    shuffled = participants[1:] + [participants[0]]
    return list(zip(participants, shuffled))

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
def start(update: Update, context: CallbackContext):
    keyboard = [
        ['üéÖ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É', 'üéÑ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ'],
        ['üìã –ú–æ–∏ –∏–≥—Ä—ã', '‚úèÔ∏è –ú–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è', '‚ùì –ü–æ–º–æ—â—å']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    update.message.reply_text(
        "üéÖ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É!*\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –æ–±–º–µ–Ω –ø–æ–¥–∞—Ä–∫–∞–º–∏. –í—ã –º–æ–∂–µ—Ç–µ:\n"
        "- –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
        "- –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–≥—Ä–µ\n"
        "- –£–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –ø–æ–¥–∞—Ä–∫–∞–º\n"
        "- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

def help_command(update: Update, context: CallbackContext):
    help_text = """
*üéÖ –ö–∞–∫ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É:*

1. *–°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É* - –Ω–∞–∂–º–∏—Ç–µ "üéÖ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É"
2. *–£–∫–∞–∂–∏—Ç–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è* - –Ω–∞–∂–º–∏—Ç–µ "‚úèÔ∏è –ú–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è"
3. *–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π* - –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–¥–æ–º –∫–æ–º–Ω–∞—Ç—ã
4. *–î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏* - –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
5. *–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∂–µ—Ä–µ–±—å–µ–≤–∫—É* - –∫–æ–≥–¥–∞ –≤—Å–µ –≥–æ—Ç–æ–≤—ã
6. *–û–±–º–µ–Ω –ø–æ–¥–∞—Ä–∫–∞–º–∏!* - –∫–∞–∂–¥—ã–π —É–∑–Ω–∞–µ—Ç, –∫–æ–º—É –¥–∞—Ä–∏—Ç—å –∏ –µ–≥–æ –ø–æ–∂–µ–ª–∞–Ω–∏—è

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ

*–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!* üéÑ
    """
    update.message.reply_text(help_text, parse_mode='Markdown')

def cancel(update: Update, context: CallbackContext):
    update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardMarkup([['/start']], resize_keyboard=True)
    )
    return ConversationHandler.END

# --- –°–∏—Å—Ç–µ–º–∞ –ø–æ–∂–µ–ª–∞–Ω–∏–π ---
def start_wishes(update: Update, context: CallbackContext):
    update.message.reply_text(
        "‚úèÔ∏è *–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –ø–æ–∂–µ–ª–∞–Ω–∏—è—Ö –∫ –ø–æ–¥–∞—Ä–∫–∞–º*\n\n"
        "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è, –∫–∞–∫–∏–µ —É –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—ã, "
        "—á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å –≤ –ø–æ–¥–∞—Ä–æ–∫:\n\n"
        "*–ü—Ä–∏–º–µ—Ä:*\n"
        "–õ—é–±–ª—é –∫–Ω–∏–≥–∏ –≤ –∂–∞–Ω—Ä–µ —Ñ—ç–Ω—Ç–µ–∑–∏, –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä—É—é –∫—Ä—É–∂–∫–∏, "
        "—Ä–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã M, –∞–ª–ª–µ—Ä–≥–∏—è –Ω–∞ —à–æ–∫–æ–ª–∞–¥, –º–µ—á—Ç–∞—é –æ –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–π –∏–≥—Ä–µ",
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardRemove()
    )
    return WISHES

def save_wishes(update: Update, context: CallbackContext):
    user_id = update.message.from_user.id
    wishes_text = update.message.text
    user_wishes[user_id] = wishes_text
    
    keyboard = [
        ['üéÖ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É', 'üéÑ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ'],
        ['üìã –ú–æ–∏ –∏–≥—Ä—ã', '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è', '‚ùì –ü–æ–º–æ—â—å']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    update.message.reply_text(
        "‚úÖ *–í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!*\n\n"
        "–ö–æ–≥–¥–∞ –≤—ã –±—É–¥–µ—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ –∏–≥—Ä–µ, –≤–∞—à –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ "
        "—É–≤–∏–¥–∏—Ç —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º —Ç–æ—á–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è!",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return ConversationHandler.END

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
def handle_message(update: Update, context: CallbackContext):
    text = update.message.text
    
    if text == 'üéÖ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É':
        update.message.reply_text("üéÖ –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≥—Ä—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
    elif text == 'üéÑ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ':
        update.message.reply_text("üéÑ –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
    elif text == 'üìã –ú–æ–∏ –∏–≥—Ä—ã':
        update.message.reply_text("üìã –°–ø–∏—Å–æ–∫ –∏–≥—Ä –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
    elif text == '‚úèÔ∏è –ú–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è' or text == '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è':
        update.message.reply_text("‚úèÔ∏è –§—É–Ω–∫—Ü–∏—è –ø–æ–∂–µ–ª–∞–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
    elif text == '‚ùì –ü–æ–º–æ—â—å':
        help_command(update, context)
    else:
        update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
            reply_markup=ReplyKeyboardMarkup([['/start']], resize_keyboard=True)
        )

def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    query.edit_message_text("üéÖ –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!")

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã...")
    
    # –°–æ–∑–¥–∞–µ–º Updater
    updater = Updater(BOT_TOKEN, use_context=True)
    
    # –ü–æ–ª—É—á–∞–µ–º dispatcher –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp = updater.dispatcher
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("help", help_command))
    dp.add_handler(CommandHandler("cancel", cancel))
    dp.add_handler(CallbackQueryHandler(button_handler))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
