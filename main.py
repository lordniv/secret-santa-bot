import os
import logging
import random
from datetime import datetime
from telegram import (
    Update, 
    ReplyKeyboardMarkup, 
    ReplyKeyboardRemove,
    InlineKeyboardMarkup, 
    InlineKeyboardButton
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    ConversationHandler,
    filters
)

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
BOT_TOKEN = os.getenv('BOT_TOKEN')

if not BOT_TOKEN:
    print("‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    print("üìù –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKEN –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Railway")
    exit(1)

# –í–∫–ª—é—á–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
SETTING_NAME, SETTING_DESCRIPTION, SETTING_BUDGET, SETTING_DATE = range(4)
WISHES, = range(4, 5)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
rooms = {}
user_rooms = {}
pending_registrations = {}
user_wishes = {}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def generate_room_code():
    import string
    characters = string.ascii_uppercase + string.digits
    return ''.join(random.choice(characters) for _ in range(6))

def shuffle_participants(participants):
    if len(participants) < 2:
        return []
    
    shuffled = participants[:]
    for attempt in range(100):
        random.shuffle(shuffled)
        valid = True
        for i in range(len(participants)):
            if participants[i] == shuffled[i]:
                valid = False
                break
        if valid:
            return list(zip(participants, shuffled))
    
    shuffled = participants[1:] + [participants[0]]
    return list(zip(participants, shuffled))

# --- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ['üéÖ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É', 'üéÑ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ'],
        ['üìã –ú–æ–∏ –∏–≥—Ä—ã', '‚úèÔ∏è –ú–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è', '‚ùì –ü–æ–º–æ—â—å']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üéÖ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É!*\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –æ–±–º–µ–Ω –ø–æ–¥–∞—Ä–∫–∞–º–∏. –í—ã –º–æ–∂–µ—Ç–µ:\n"
        "- –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É\n"
        "- –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–≥—Ä–µ\n"
        "- –£–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –ø–æ–¥–∞—Ä–∫–∞–º\n"
        "- –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
*üéÖ –ö–∞–∫ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É:*

1. *–°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É* - –Ω–∞–∂–º–∏—Ç–µ "üéÖ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É"
2. *–£–∫–∞–∂–∏—Ç–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è* - –Ω–∞–∂–º–∏—Ç–µ "‚úèÔ∏è –ú–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è"
3. *–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π* - –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–¥–æ–º –∫–æ–º–Ω–∞—Ç—ã
4. *–î–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏* - –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
5. *–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∂–µ—Ä–µ–±—å–µ–≤–∫—É* - –∫–æ–≥–¥–∞ –≤—Å–µ –≥–æ—Ç–æ–≤—ã
6. *–û–±–º–µ–Ω –ø–æ–¥–∞—Ä–∫–∞–º–∏!* - –∫–∞–∂–¥—ã–π —É–∑–Ω–∞–µ—Ç, –∫–æ–º—É –¥–∞—Ä–∏—Ç—å –∏ –µ–≥–æ –ø–æ–∂–µ–ª–∞–Ω–∏—è

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ

*–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!* üéÑ
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardMarkup([['/start']], resize_keyboard=True)
    )
    return ConversationHandler.END

# --- –°–∏—Å—Ç–µ–º–∞ –ø–æ–∂–µ–ª–∞–Ω–∏–π ---
async def start_wishes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚úèÔ∏è *–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –ø–æ–∂–µ–ª–∞–Ω–∏—è—Ö –∫ –ø–æ–¥–∞—Ä–∫–∞–º*\n\n"
        "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è, –∫–∞–∫–∏–µ —É –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—ã, "
        "—á—Ç–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å –≤ –ø–æ–¥–∞—Ä–æ–∫:\n\n"
        "*–ü—Ä–∏–º–µ—Ä:*\n"
        "–õ—é–±–ª—é –∫–Ω–∏–≥–∏ –≤ –∂–∞–Ω—Ä–µ —Ñ—ç–Ω—Ç–µ–∑–∏, –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä—É—é –∫—Ä—É–∂–∫–∏, "
        "—Ä–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã M, –∞–ª–ª–µ—Ä–≥–∏—è –Ω–∞ —à–æ–∫–æ–ª–∞–¥, –º–µ—á—Ç–∞—é –æ –Ω–∞—Å—Ç–æ–ª—å–Ω–æ–π –∏–≥—Ä–µ",
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardRemove()
    )
    return WISHES

async def save_wishes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    wishes_text = update.message.text
    user_wishes[user_id] = wishes_text
    
    keyboard = [
        ['üéÖ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É', 'üéÑ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ'],
        ['üìã –ú–æ–∏ –∏–≥—Ä—ã', '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è', '‚ùì –ü–æ–º–æ—â—å']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "‚úÖ *–í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!*\n\n"
        "–ö–æ–≥–¥–∞ –≤—ã –±—É–¥–µ—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ –∏–≥—Ä–µ, –≤–∞—à –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞ "
        "—É–≤–∏–¥–∏—Ç —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Å–º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º —Ç–æ—á–Ω–æ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è!",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    return ConversationHandler.END

# --- –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã ---
async def create_room_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üéÖ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã*\n\n"
        "–ö–∞–∫ –Ω–∞–∑–æ–≤–µ–º –≤–∞—à—É –∏–≥—Ä—É? (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–°–µ–º–µ–π–Ω—ã–π –ù–æ–≤—ã–π –ì–æ–¥' –∏–ª–∏ '–û—Ñ–∏—Å–Ω—ã–π –æ–±–º–µ–Ω')",
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardRemove()
    )
    return SETTING_NAME

async def set_room_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['room_name'] = update.message.text
    await update.message.reply_text(
        "üìù *–û—Ç–ª–∏—á–Ω–æ!* –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –∏–≥—Ä—É:\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: '–û–±–º–µ–Ω –ø–æ–¥–∞—Ä–∫–∞–º–∏ –≤ –∫—Ä—É–≥—É —Å–µ–º—å–∏', '–û—Ñ–∏—Å–Ω—ã–π –¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞')\n"
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å",
        parse_mode='Markdown'
    )
    return SETTING_DESCRIPTION

async def set_room_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['room_description'] = update.message.text
    return await ask_budget(update, context)

async def skip_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['room_description'] = "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
    return await ask_budget(update, context)

async def ask_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üí∞ *–£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤:*\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: 1000 —Ä—É–±–ª–µ–π, –¥–æ 2000—Ä, –∏–ª–∏ '–±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π')\n"
        "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –≤—ã–±–æ—Ä–µ –ø–æ–¥–∞—Ä–∫–∞",
        parse_mode='Markdown'
    )
    return SETTING_BUDGET

async def set_room_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['room_budget'] = update.message.text
    await update.message.reply_text(
        "üìÖ *–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –æ–±–º–µ–Ω –ø–æ–¥–∞—Ä–∫–∞–º–∏?*\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: '25 –¥–µ–∫–∞–±—Ä—è', '30 –¥–µ–∫–∞–±—Ä—è', '–ù–æ–≤—ã–π –ì–æ–¥')\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip",
        parse_mode='Markdown'
    )
    return SETTING_DATE

async def set_room_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['exchange_date'] = update.message.text
    return await finish_room_creation(update, context)

async def skip_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['exchange_date'] = "–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    return await finish_room_creation(update, context)

async def finish_room_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name
    room_code = generate_room_code()
    
    rooms[room_code] = {
        'name': context.user_data['room_name'],
        'description': context.user_data['room_description'],
        'budget': context.user_data['room_budget'],
        'date': context.user_data['exchange_date'],
        'admin': user_id,
        'participants': [user_id],
        'user_names': {user_id: user_name},
        'shuffled': False,
        'pairs': {},
        'created_at': datetime.now()
    }
    
    user_rooms[user_id] = room_code
    pending_registrations[room_code] = []
    
    room_info = f"""
üéÖ *–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞!*

*–ù–∞–∑–≤–∞–Ω–∏–µ:* {rooms[room_code]['name']}
*–û–ø–∏—Å–∞–Ω–∏–µ:* {rooms[room_code]['description']}
*–ë—é–¥–∂–µ—Ç:* {rooms[room_code]['budget']}
*–î–∞—Ç–∞ –æ–±–º–µ–Ω–∞:* {rooms[room_code]['date']}

*–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:* `{room_code}`

*–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –∫–æ–¥–æ–º —Å –¥—Ä—É–∑—å—è–º–∏, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!*

*–£—á–∞—Å—Ç–Ω–∏–∫–∏ (1):*
- {user_name}
    """
    
    keyboard = [
        [InlineKeyboardButton("üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–¥–æ–º", 
             url=f"https://t.me/share/url?url=–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è%20–∫%20–º–æ–µ–π%20–∏–≥—Ä–µ%20–¢–∞–π–Ω–æ–≥–æ%20–°–∞–Ω—Ç—ã!%20–ö–æ–¥:%20{room_code}")],
        [InlineKeyboardButton("üë• –ù–∞—á–∞—Ç—å –∂–µ—Ä–µ–±—å–µ–≤–∫—É", callback_data=f"shuffle_{room_code}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        room_info,
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )
    
    context.user_data.clear()
    return ConversationHandler.END

# --- –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ ---
async def join_room_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üéÑ *–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã:",
        parse_mode='Markdown',
        reply_markup=ReplyKeyboardRemove()
    )

async def join_room_with_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    room_code = update.message.text.upper().strip()
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name
    
    if room_code not in rooms:
        await update.message.reply_text(
            "‚ùå *–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞*\n"
            "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode='Markdown'
        )
        return
    
    room = rooms[room_code]
    
    if user_id in room['participants']:
        await update.message.reply_text("‚úÖ –í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ!", parse_mode='Markdown')
        return
    
    if room['shuffled']:
        await update.message.reply_text(
            "‚ùå *–ñ–µ—Ä–µ–±—å–µ–≤–∫–∞ –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n"
            "–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –Ω–µ–ª—å–∑—è.",
            parse_mode='Markdown'
        )
        return
    
    if user_id not in pending_registrations[room_code]:
        pending_registrations[room_code].append(user_id)
    
    try:
        await context.bot.send_message(
            chat_id=room['admin'],
            text=f"üéÖ *–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫!*\n\n"
                 f"*{user_name}* —Ö–æ—á–µ—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ '{room['name']}'\n\n"
                 f"–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: `{room_code}`",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{room_code}_{user_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{room_code}_{user_id}")
            ]])
        )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
    
    await update.message.reply_text(
        "‚úÖ *–ó–∞–ø—Ä–æ—Å –Ω–∞ —É—á–∞—Å—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!*\n"
        "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞.",
        parse_mode='Markdown'
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_id = query.from_user.id
    
    if data.startswith('shuffle_'):
        room_code = data.replace('shuffle_', '')
        await start_shuffle(query, context, room_code)
    
    elif data.startswith('accept_'):
        parts = data.split('_')
        room_code, target_user_id = parts[1], int(parts[2])
        await accept_participant(query, context, room_code, target_user_id)
    
    elif data.startswith('reject_'):
        parts = data.split('_')
        room_code, target_user_id = parts[1], int(parts[2])
        await reject_participant(query, context, room_code, target_user_id)

async def accept_participant(query, context, room_code, target_user_id):
    if room_code not in rooms:
        await query.edit_message_text("‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    room = rooms[room_code]
    
    if query.from_user.id != room['admin']:
        await query.answer("–¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!", show_alert=True)
        return
    
    if target_user_id in pending_registrations[room_code]:
        pending_registrations[room_code].remove(target_user_id)
    
    room['participants'].append(target_user_id)
    
    try:
        user_chat = await context.bot.get_chat(target_user_id)
        user_name = user_chat.first_name
        room['user_names'][target_user_id] = user_name
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        user_name = "–£—á–∞—Å—Ç–Ω–∏–∫"
        room['user_names'][target_user_id] = user_name
    
    try:
        await context.bot.send_message(
            chat_id=target_user_id,
            text=f"üéâ –í–∞—Å –ø—Ä–∏–Ω—è–ª–∏ –≤ –∏–≥—Ä—É '*{room['name']}*'!\n\n"
                 f"–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –∂–µ—Ä–µ–±—å–µ–≤–∫–∏.\n\n"
                 f"*–ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –ø–æ–¥–∞—Ä–∫–∞–º!*",
            parse_mode='Markdown'
        )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
    
    participants_list = "\n".join([f"- {name}" for name in room['user_names'].values()])
    
    await query.edit_message_text(
        f"‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ –ø—Ä–∏–Ω—è—Ç!\n\n"
        f"*–¢–µ–∫—É—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(room['participants'])}):*\n{participants_list}\n\n"
        f"–ö–æ–¥ –∫–æ–º–Ω–∞—Ç—ã: `{room_code}`",
        parse_mode='Markdown',
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üé≤ –ù–∞—á–∞—Ç—å –∂–µ—Ä–µ–±—å–µ–≤–∫—É", callback_data=f"shuffle_{room_code}")
        ]])
    )

async def reject_participant(query, context, room_code, target_user_id):
    if room_code not in rooms:
        await query.edit_message_text("‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    room = rooms[room_code]
    
    if query.from_user.id != room['admin']:
        await query.answer("–¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!", show_alert=True)
        return
    
    if target_user_id in pending_registrations[room_code]:
        pending_registrations[room_code].remove(target_user_id)
    
    try:
        await context.bot.send_message(
            chat_id=target_user_id,
            text=f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∏–≥—Ä–µ '*{room['name']}*'.",
            parse_mode='Markdown'
        )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
    
    await query.edit_message_text("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω.")

async def start_shuffle(query, context, room_code):
    if room_code not in rooms:
        await query.edit_message_text("‚ùå –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    room = rooms[room_code]
    
    if query.from_user.id != room['admin']:
        await query.answer("–¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å –∂–µ—Ä–µ–±—å–µ–≤–∫—É!", show_alert=True)
        return
    
    if len(room['participants']) < 2:
        await query.answer("–ù—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞!", show_alert=True)
        return
    
    pairs = shuffle_participants(room['participants'])
    room['pairs'] = dict(pairs)
    room['shuffled'] = True
    
    successful_sends = 0
    for santa_id, receiver_id in pairs:
        santa_name = room['user_names'][santa_id]
        receiver_name = room['user_names'][receiver_id]
        
        receiver_wishes = user_wishes.get(receiver_id, "‚ùì *–ü–æ–∂–µ–ª–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω—ã*\n\n–≠—Ç–æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫ –µ—â–µ –Ω–µ —Ä–∞—Å—Å–∫–∞–∑–∞–ª –æ —Å–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö.")
        
        try:
            message_text = f"üéÖ *–¢–∞–π–Ω—ã–π –°–∞–Ω—Ç–∞!*\n\n"
            message_text += f"–í—ã –¥–∞—Ä–∏—Ç–µ –ø–æ–¥–∞—Ä–æ–∫: *{receiver_name}*\n\n"
            message_text += f"*–ü–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:*\n{receiver_wishes}\n\n"
            message_text += f"*–î–µ—Ç–∞–ª–∏ –∏–≥—Ä—ã:*\n"
            message_text += f"- –ù–∞–∑–≤–∞–Ω–∏–µ: {room['name']}\n"
            message_text += f"- –ë—é–¥–∂–µ—Ç: {room['budget']}\n"
            message_text += f"- –î–∞—Ç–∞ –æ–±–º–µ–Ω–∞: {room['date']}\n\n"
            message_text += f"*–ù–µ –≥–æ–≤–æ—Ä–∏—Ç–µ –Ω–∏–∫–æ–º—É, –∫–æ–º—É –≤—ã –¥–∞—Ä–∏—Ç–µ!* ü§´"
            
            await context.bot.send_message(
                chat_id=santa_id,
                text=message_text,
                parse_mode='Markdown'
            )
            successful_sends += 1
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {santa_id}: {e}")
    
    await query.edit_message_text(
        f"üéâ *–ñ–µ—Ä–µ–±—å–µ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*\n\n"
        f"–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã {successful_sends} –∏–∑ {len(room['participants'])} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n"
        f"–ö–∞–∂–¥—ã–π –∑–Ω–∞–µ—Ç, –∫–æ–º—É –æ–Ω –¥–∞—Ä–∏—Ç –ø–æ–¥–∞—Ä–æ–∫ –∏ –≤–∏–¥–∏—Ç –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è.\n\n"
        f"*–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤:* {len(room['participants'])}\n"
        f"*–ò–≥—Ä–∞:* {room['name']}",
        parse_mode='Markdown'
    )

# --- –ü—Ä–æ—Å–º–æ—Ç—Ä –º–æ–∏—Ö –∏–≥—Ä ---
async def my_games(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    
    user_games = []
    
    for room_code, room in rooms.items():
        if user_id in room['participants']:
            status = "üëë –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä" if user_id == room['admin'] else "üéÖ –£—á–∞—Å—Ç–Ω–∏–∫"
            shuffle_status = "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞" if room['shuffled'] else "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ"
            
            user_games.append(
                f"*{room['name']}*\n"
                f"–ö–æ–¥: `{room_code}` - {status}\n"
                f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(room['participants'])} - –ñ–µ—Ä–µ–±—å–µ–≤–∫–∞: {shuffle_status}\n"
            )
    
    if not user_games:
        await update.message.reply_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä.\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π!",
            parse_mode='Markdown'
        )
        return
    
    games_text = "üéÑ *–í–∞—à–∏ –∏–≥—Ä—ã:*\n\n" + "\n".join(user_games)
    await update.message.reply_text(games_text, parse_mode='Markdown')

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == 'üéÖ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É':
        await create_room_start(update, context)
    elif text == 'üéÑ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ':
        await join_room_start(update, context)
    elif text == 'üìã –ú–æ–∏ –∏–≥—Ä—ã':
        await my_games(update, context)
    elif text == '‚úèÔ∏è –ú–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è' or text == '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è':
        await start_wishes(update, context)
    elif text == '‚ùì –ü–æ–º–æ—â—å':
        await help_command(update, context)
    else:
        if len(text.strip()) == 6 and text.strip().isalnum():
            await join_room_with_code(update, context)
        else:
            await update.message.reply_text(
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start",
                reply_markup=ReplyKeyboardMarkup([['/start']], resize_keyboard=True)
            )

# --- –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã –Ω–∞ Railway...")
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–Ω–∞—Ç—ã
    creation_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^üéÖ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É$'), create_room_start)],
        states={
            SETTING_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_room_name)],
            SETTING_DESCRIPTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_room_description),
                CommandHandler('skip', skip_description)
            ],
            SETTING_BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, set_room_budget)],
            SETTING_DATE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, set_room_date),
                CommandHandler('skip', skip_date)
            ],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∂–µ–ª–∞–Ω–∏–π
    wishes_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^(‚úèÔ∏è –ú–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è|‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è)$'), start_wishes)],
        states={
            WISHES: [MessageHandler(filters.TEXT & ~filters.COMMAND, save_wishes)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("cancel", cancel))
    application.add_handler(creation_conv)
    application.add_handler(wishes_conv)
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.Regex('^üìã –ú–æ–∏ –∏–≥—Ä—ã$'), my_games))
    application.add_handler(MessageHandler(filters.Regex('^‚ùì –ü–æ–º–æ—â—å$'), help_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Railway!")
    print("üéÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ Telegram!")
    application.run_polling()

if __name__ == '__main__':
    main()
