import os
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    filters, 
    ContextTypes
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ['üéÖ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É', 'üéÑ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ'],
        ['üìã –ú–æ–∏ –∏–≥—Ä—ã', '‚úèÔ∏è –ú–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è', '‚ùì –ü–æ–º–æ—â—å']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        "üéÖ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É!*\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –æ–±–º–µ–Ω –ø–æ–¥–∞—Ä–∫–∞–º–∏.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup,
        parse_mode='Markdown'
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
*üéÖ –ö–∞–∫ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—É:*

1. *–°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É* - –Ω–∞–∂–º–∏—Ç–µ "üéÖ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É"
2. *–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π* - –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–¥–æ–º –∫–æ–º–Ω–∞—Ç—ã  
3. *–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∂–µ—Ä–µ–±—å–µ–≤–∫—É* - –∫–æ–≥–¥–∞ –≤—Å–µ –≥–æ—Ç–æ–≤—ã
4. *–û–±–º–µ–Ω –ø–æ–¥–∞—Ä–∫–∞–º–∏!* - –∫–∞–∂–¥—ã–π —É–∑–Ω–∞–µ—Ç, –∫–æ–º—É –¥–∞—Ä–∏—Ç—å

*–ö–æ–º–∞–Ω–¥—ã:*
/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!* üéÑ
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == 'üéÖ –°–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É':
        await update.message.reply_text(
            "üéÖ *–°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä—ã*\n\n"
            "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∏–≥—Ä—É –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã:\n"
            "1. –ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã\n"
            "2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –±—é–¥–∂–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤\n" 
            "3. –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ –∫–æ–¥—É\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ—Å—Ç—É–ø–Ω–∞!",
            parse_mode='Markdown'
        )
    elif text == 'üéÑ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ':
        await update.message.reply_text(
            "üéÑ *–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ*\n\n" 
            "–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∏–≥—Ä–µ:\n"
            "1. –ü–æ–ª—É—á–∏—Ç–µ –∫–æ–¥ –∫–æ–º–Ω–∞—Ç—ã –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞\n"
            "2. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n"
            "3. –û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –∂–µ—Ä–µ–±—å–µ–≤–∫–∏\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –¥–æ—Å—Ç—É–ø–Ω–∞!",
            parse_mode='Markdown'
        )
    elif text == 'üìã –ú–æ–∏ –∏–≥—Ä—ã':
        await update.message.reply_text(
            "üìã *–ú–æ–∏ –∏–≥—Ä—ã*\n\n"
            "–ó–¥–µ—Å—å –≤—ã —É–≤–∏–¥–∏—Ç–µ –≤—Å–µ –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã.\n\n"
            "–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É!",
            parse_mode='Markdown'
        )
    elif text == '‚úèÔ∏è –ú–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è':
        await update.message.reply_text(
            "‚úèÔ∏è *–ú–æ–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è*\n\n"
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö –≤ –ø–æ–¥–∞—Ä–∫–∞—Ö:\n"
            "- –õ—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã –∫–Ω–∏–≥/—Ñ–∏–ª—å–º–æ–≤\n" 
            "- –†–∞–∑–º–µ—Ä –æ–¥–µ–∂–¥—ã/–æ–±—É–≤–∏\n"
            "- –•–æ–±–±–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã\n"
            "- –ê–ª–ª–µ—Ä–≥–∏–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\n\n"
            "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞!",
            parse_mode='Markdown'
        )
    elif text == '‚ùì –ü–æ–º–æ—â—å':
        await help_command(update, context)
    else:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /start",
            reply_markup=ReplyKeyboardMarkup([['/start']], resize_keyboard=True)
        )

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¢–∞–π–Ω–æ–≥–æ –°–∞–Ω—Ç—ã...")
    
    if not BOT_TOKEN:
        print("‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKEN –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Railway")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º Application
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        print("ü§ñ –û–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è...")
        
        application.run_polling()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == '__main__':
    main()
